#!/usr/bin/env python3

"""
 The trajectory node publishes a custom velocity message into a geometry_msgs/Twist
 and publish to the turtlebot cmd_vel in order to draw the figure eight

PUBLISHERS:
  cmd_vel (geometry_msgs/Twist) - the linear and angular velocity of the turtlebot
  path (nav_msgs/Path) - the path (x,y) of the turtlebot

SERVICES:   
  pause (Empty) - stop the turtle's motion, in a way that the trajectory can be
                    resumed
  resume (Empty) - resume the turtle's motion along the trajectory

PARAMETERS:
  width - The width of the figure eight
  height - The height of the figure eight
  period - The amount of time it takes to complete the figure eight
  ~pub_freq - The frequency at which to publish the messages (a private parameter)
"""

import rospy
from geometry_msgs.msg import Twist, Pose, Point, PoseStamped, Quaternion, Vector3
from nav_msgs.msg import Path
from std_srvs.srv import Empty, EmptyResponse
import sympy
from sympy.abc import t
from sympy import symbols, Eq, Function, cos, sin, atan2, pi
import tf
# import calculations1 as calculations # TODO 
# import yaml

# with open(r'config/trajectory.yaml') as file:
#     # The FullLoader parameter handles the conversion from YAML
#     # scalar values to Python the dictionary format
#     parameters_list = yaml.load(file, Loader=yaml.FullLoader)

##################### TODO Move

import sympy
from sympy import symbols, Eq, Function, solve, sqrt
import numpy as np
import matplotlib.pyplot as plt
import math

def calculate_velocity(T_val, H_val, W_val):
    W, H, T, t = symbols(r'W, H, T, t') 

    v = Function(r'v')(t)
    x = Function(r'x')(t)
    y = Function(r'y')(t)
    theta = Function(r'theta')(t)

    x = (W/2)*sympy.sin(2*sympy.pi*t/T) # a function for the component x(t) of the figure-eight trajectory
    y = (H/2)*sympy.sin(4*sympy.pi*t/T) # a function for the component y(t) of the figure-eight trajectory

    # taking a derivative
    xdot = x.diff(t)
    ydot = y.diff(t)

    xddot = xdot.diff(t)
    yddot = ydot.diff(t)


    # from the kinematic equations  xdot = v*cos(theta)
    #                               ydot = v*sin(theta) we get:
    v = sqrt(xdot**2 + ydot**2)
    theta = sympy.atan2(ydot, xdot)

    thetadot = theta.diff(t)        # derivative d/dt of theta(t) 
    omega = thetadot                # defining omega

    v = sympy.simplify(v.subs([(W, W_val), (H, H_val), (T, T_val)]))
    omega = sympy.simplify(omega.subs([(W, W_val), (H, H_val), (T, T_val)]))
    x = sympy.simplify(x.subs([(W, W_val), (H, H_val), (T, T_val)]))
    y = sympy.simplify(y.subs([(W, W_val), (H, H_val), (T, T_val)]))

    return x, y, v, omega

class FigureEight():
    def __init__(self, T_val, H_val, W_val):
        self._x, self._y, self._v, self._omega = calculate_velocity(T_val, H_val, W_val)
        self._t = symbols(r't')

    def get_velocity(self, time_step):
        x = self._x.subs(self._t, time_step)
        y = self._y.subs(self._t, time_step)
        v = self._v.subs(self._t, time_step)
        omega = self._omega.subs(self._t, time_step)
        return float(x), float(y), float(v), float(omega)


#####################



class Trajectory():
    """ Publish a geometry_msgs/Twist of the calculated linear and angular
    velocity to the tertlebot's cmd_vel at a fixed rate 
    """
    def __init__(self):
        self.W = rospy.get_param("parameters/width")    # initializing the width of the figure eight
        self.H = rospy.get_param("parameters/height")   # initializing the height of the figure eight
        self.T = rospy.get_param("parameters/period")   # initializing the amount of time it takes to complete the figure eight
        self.R = rospy.get_param("~pub_freq")           # initializing the frequency at which to publish the messages
        # self.pub_vel = rospy.Publisher("turtle1/cmd_vel", Twist, queue_size = 10) # TODO replace turtle1 with turtlebot
        self.pub_vel = rospy.Publisher("/cmd_vel", Twist, queue_size = 10) # TODO ^^^
        self.path_pub = rospy.Publisher("path", Path, queue_size = 10)
        self.pause = rospy.Service("pause", Empty, self.pause_turtle_callback)
        self.resume = rospy.Service("resume", Empty, self.resume_turtle_callback)
        self.figure_eight = FigureEight(self.T, self.H, self.W) # TODO add calculations.
        self.rate = rospy.Rate(self.R)
        self.move_turtlebot = False
        self._t = 0
        self.path = Path()
        self.path.poses = []
        self.x = None
        self.y = None
        self.br = tf.TransformBroadcaster()


    def pause_turtle_callback(self, message):
        """ Callback function for pause service (type - Empty).
        The service call the turtlebot_twist function, publish the twist message
        (to store the turtlebot velocity) and pause the turtlebot movement.
        Args: None
        Return: EmptyResponse
        """
        rospy.logdebug(f"Pause Message")
        twist = self.turtlebot_twist()
        self.pub_vel.publish(twist)
        self.move_turtlebot = False
        return EmptyResponse()


    def resume_turtle_callback(self, message): 
        """ Callback function for resume service (type - Empty).
        The service resume the turtlebot movement with the stored velocity
        values.
        Args: None
        Return: EmptyResponse
        """
        rospy.logdebug(f"Resume Message")
        self.move_turtlebot = True
        return EmptyResponse()


    def transform_broadcast(self):
        """ Transform from world frame (0, 0, 0) to odom frame (0, 0, theta0),
        where theta0 is the initial angle of the robot on its figure-eight
        trajectory
        """
        pos = (0, 0, 0)
        rot = tf.transformations.quaternion_from_euler(0, 0, sympy.pi/4) 
        self.br.sendTransform(pos, rot, rospy.Time.now(), "odom", "world") 


    def turtlebot_twist(self):
        """ Create a twist suitable for the turtlebot's cmd_vel
        Args: None
        Returns:
            Twist - a 2D twist object corresponding to linear/angular velocity
        """
        self.x, self.y, v, omega = self.figure_eight.get_velocity(self._t)
        return Twist(linear = Vector3(x = v, y = 0, z = 0),
                    angular = Vector3(x = 0, y = 0, z = 10*omega)) # TODO 10*omega


    def move(self):
        rospy.logdebug(f"Posting: {self._t, self.figure_eight.get_velocity(self._t)}")
        twist = self.turtlebot_twist()
        self.transform_broadcast()
        self.path.header.stamp = rospy.Time.now()
        self.path.header.frame_id = "odom"
        self.path.poses.append(PoseStamped(header = self.path.header, 
                                        pose = Pose(
                                            position = Point(self.x, self.y, 1), 
                                            orientation = Quaternion(0, 0, 0, 1))))
        self.path_pub.publish(self.path)
        self._t += 1/self.R
        self.pub_vel.publish(twist)
        rospy.logdebug(f"t = {self._t}")
        if int(self._t) == self.T:
            self.path.poses = []
            self._t = 0


    def run(self):
        while True:
            rospy.logdebug(f"Run Message")
            if self.move_turtlebot:
                self.move()
            else:
             rospy.logdebug(f"In pause mode")
            self.rate.sleep()


def main():
    """ The main() function. """
    rospy.init_node('trajectory', log_level = rospy.DEBUG)
    # rospy.logdebug(f"Running 1") #TODO 
    traj = Trajectory()
    # rospy.logdebug(f"Running 2") #TODO 
    traj.run()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass